From: Marius Gedminas <marius@gedmin.as>
Date: Mon, 28 Nov 2022 09:11:37 +0200
Subject: Add support for Python 3.11

Closes #68.

Bug-Debian: https://bugs.debian.org/1025015
Bug-Upstream: https://github.com/mgedmin/objgraph/issues/68
Origin: https://github.com/mgedmin/objgraph/pull/69
---
 docs/generator-sample.txt |  2 +-
 docs/highlighting.txt     |  2 +-
 docs/index.txt            |  2 +-
 objgraph.py               |  2 +-
 tests.py                  | 21 ++++++++++++++++++---
 5 files changed, 22 insertions(+), 7 deletions(-)

diff --git a/docs/generator-sample.txt b/docs/generator-sample.txt
index dc10aa6..9a1011e 100644
--- a/docs/generator-sample.txt
+++ b/docs/generator-sample.txt
@@ -43,7 +43,7 @@ Or we can examine just one of the reference chains leading straight to a module.
     >>> objgraph.show_chain(
     ...     objgraph.find_backref_chain(objgraph.by_type('Canary')[0],
     ...                                 objgraph.is_proper_module),
-    ...     filename='canary-chain.png')
+    ...     filename='canary-chain.png') # doctest: +NODES_VARY
     Graph written to ....dot (11 nodes)
     Image generated as canary-chain.png
 
diff --git a/docs/highlighting.txt b/docs/highlighting.txt
index 95ba292..591e4a9 100644
--- a/docs/highlighting.txt
+++ b/docs/highlighting.txt
@@ -16,7 +16,7 @@ You can highlight some graph nodes.
     >>> objgraph.show_backrefs(a, max_depth=15,
     ...     extra_ignore=[id(locals())],
     ...     highlight=lambda x: isinstance(x, Node),
-    ...     filename='highlight.png')
+    ...     filename='highlight.png') # doctest: +NODES_VARY
     Graph written to ....dot (12 nodes)
     Image generated as highlight.png
 
diff --git a/docs/index.txt b/docs/index.txt
index e022ade..c7751dd 100644
--- a/docs/index.txt
+++ b/docs/index.txt
@@ -111,7 +111,7 @@ you've any examples where that isn't true, I'd love to hear about them
     ...     objgraph.find_backref_chain(
     ...         random.choice(objgraph.by_type('MyBigFatObject')),
     ...         objgraph.is_proper_module),
-    ...     filename='chain.png')
+    ...     filename='chain.png') # doctest: +NODES_VARY
     Graph written to ...dot (13 nodes)
     Image generated as chain.png
 
diff --git a/objgraph.py b/objgraph.py
index a1da76b..5296b8b 100755
--- a/objgraph.py
+++ b/objgraph.py
@@ -3,7 +3,7 @@ Tools for drawing Python object reference graphs with graphviz.
 
 You can find documentation online at https://mg.pov.lt/objgraph/
 
-Copyright (c) 2008-2017 Marius Gedminas <marius@pov.lt> and contributors
+Copyright (c) 2008-2022 Marius Gedminas <marius@pov.lt> and contributors
 
 Released under the MIT licence.
 """
diff --git a/tests.py b/tests.py
index 27a325a..907846d 100755
--- a/tests.py
+++ b/tests.py
@@ -378,14 +378,13 @@ def doctest_get_new_ids_prints():
 
         >>> _ = objgraph.get_new_ids(limit=0)
         >>> _ = objgraph.get_new_ids(limit=0)
-        >>> a = [0, 1, 2]  # noqa
-        >>> b = [3, 4, 5]  # noqa
+        >>> a = [[] for n in range(10)]  # noqa
         >>> _ = objgraph.get_new_ids(limit=1)
         ... # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
         ========================================================
         Type      Old_ids  Current_ids      New_ids Count_Deltas
         ========================================================
-        list          ...          ...          ...           +2
+        list          ...          ...          ...          +11
         ========================================================
 
     """
@@ -504,6 +503,17 @@ class StringRepresentationTest(GarbageCollectedMixin,
 
         self.assertEqual('a_method', objgraph._short_repr(MyClass.a_method))
 
+    def test_short_repr_frame(self):
+        frame = sys._getframe()
+        # we're calling _short_repr() 6 lines down from here
+        lineno = frame.f_lineno + 6
+        # Python >= 3.9 uses absolute filenames
+        expected = {
+            'tests.py:%d' % lineno,
+            '%s:%d' % (os.path.abspath('tests.py'), lineno),
+        }
+        self.assertIn(objgraph._short_repr(frame), expected)
+
     def test_gradient_empty(self):
         self.assertEqual((0.1, 0.2, 0.3),
                          objgraph._gradient((0.1, 0.2, 0.3),
@@ -514,6 +524,11 @@ class StringRepresentationTest(GarbageCollectedMixin,
         self.assertEqual(' [label="f_locals",weight=10]',
                          objgraph._edge_label(frame, frame.f_locals))
 
+    def test_edge_label_frame_globals(self):
+        frame = sys._getframe()
+        self.assertEqual(' [label="f_globals",weight=10]',
+                         objgraph._edge_label(frame, frame.f_globals))
+
     @skipIf(sys.version_info[0] > 2, "Python 3 has no unbound methods")
     def test_edge_label_unbound_method(self):
         class MyClass(object):
